image: microsoft/aspnetcore-build:2.0

pipelines:
  branches:
    master:
      - step:
          name: Build app
          caches:
            - dotnetcore
          script:
            - cd Grotesque
            - dotnet build Grotesque.csproj -c Release -o /app
            - dotnet publish Grotesque.csproj -c Release -o /app
          artifacts:
            - /app/**
      - step:
          name: Docker
          services:
            - docker
          script:
            - docker login -u ${ACR_USERNAME} -p ${ACR_PASSWORD} ${ACR_URL}
            - docker build -t connyun.azurecr.io/com.connyun/grotesque:${BITBUCKET_TAG} -f Grotesque/Dockerfile .
            - docker push connyun.azurecr.io/com.connyun/grotesque:${BITBUCKET_TAG}
            - docker logout ${ACR_URL}
          
    develop:
      - step:
          name: Build app
          caches:
            - dotnetcore
          script:
            - cd Grotesque
            - dotnet build Grotesque.csproj -c Release -o /app
            - dotnet publish Grotesque.csproj -c Release -o /app
          artifacts:
            - /app/**
      - step:
          name: Docker
          services:
            - docker
          script:
            # set version from Git tag
            - export SEMVER=`git describe`
            - docker login -u ${ACR_USERNAME} -p ${ACR_PASSWORD} ${ACR_URL}
            - docker build -t connyun.azurecr.io/com.connyun/grotesque:${SEMVER} -f Grotesque/Dockerfile .
            - docker push connyun.azurecr.io/com.connyun/grotesque:${SEMVER}
            - docker logout ${ACR_URL}
      - step:
          name: Package helm chart & push to artifactory
          image:
            name: connyun.azurecr.io/com.connyun/helm:2.7.2
            username: ${ACR_USERNAME}
            password: ${ACR_PASSWORD}
            email: grotesque-build@connyun.com
          script:
            # setup helm client
            - helm init --client-only
            # setup artifactory cli
            - curl -fL https://getcli.jfrog.io | bash
            - mv ./jfrog /usr/local/bin/jfrog
            - jfrog rt config artifactory --url=${ARTIFACTORY_URL} --apikey=${ARTIFACTORY_HELM_API_KEY}
            # set version from Git tag
            - export SEMVER=`git describe`
            # package helm chart
            - sed --in-place "s/SET_ME/${SEMVER}/g" helm/grotesque/templates/deployment.yaml # set the docker image
            - helm package --version "${SEMVER}" helm/grotesque/
            # push packaged helm and build information chart to artifactory
            - jfrog rt upload grotesque-${SEMVER}.tgz helm/grotesque/grotesque-${SEMVER}.tgz --build-name=${BITBUCKET_REPO_SLUG} --build-number=${BITBUCKET_BUILD_NUMBER}
      - step:
          name: Continuous deployment to dev cluster
          image:
            name: connyun.azurecr.io/com.connyun/kubectl:1.8.10
            username: ${ACR_USERNAME}
            password: ${ACR_PASSWORD}
          deployment: test
          script:
            - echo "${K8S_DEV_CA}" | base64 -d > .k8s-dev-ca.crt
            - kubectl config set-cluster dev-cluster --embed-certs=true --server=${K8S_DEV_API_SERVER} --certificate-authority=.k8s-dev-ca.crt
            - kubectl config set-credentials ${K8S_DEV_SA} --token=${K8S_DEV_TOKEN}
            - kubectl config set-context dev --cluster=dev-cluster --user=${K8S_DEV_SA} --namespace=default
            - kubectl config use-context dev
            # setup helm client
            - wget https://jfrog.bintray.com/helm/2.7.2-j/linux-amd64/helm -O /usr/local/bin/helm
            - chmod +x /usr/local/bin/helm
            - helm init --client-only
            # set version from Git tag
            - export SEMVER=`git describe`
            # deploy helm chart to dev cluster
            - helm upgrade grotesque ${ARTIFACTORY_URL}helm/grotesque/grotesque-${SEMVER}.tgz --username ${ARTIFACTORY_HELM_USER} --password ${ARTIFACTORY_HELM_API_KEY} --values runtime-config/values-dev.yaml --version ${SEMVER} --install --wait
      